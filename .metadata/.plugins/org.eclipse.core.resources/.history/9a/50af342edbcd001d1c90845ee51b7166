import java.util.*;

public class Solution {
    static int n;
    static char[][] board;
    static boolean[][] visited;
    static int[] dx = {-1, 0, 1, 0};
    static int[] dy = {0, 1, 0, -1};

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();

        for (int i = 1; i <= t; i++) {
            n = scanner.nextInt();
            board = new char[n][n];
            visited = new boolean[n][n];

            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    board[j][k] = scanner.next().charAt(0);
                }
            }

            int maxCount = 0;
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    if (board[j][k] == 'X') {
                        maxCount = Math.max(maxCount, dfs(j, k));
                    }
                }
            }

            System.out.println("#" + i + " " + maxCount);
        }
    }

    public static int dfs(int x, int y) {
        visited[x][y] = true;
        int count = 1;

        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if (nx < 0 || nx >= n || ny < 0 || ny >= n) continue;
            if (board[nx][ny] == 'Y') count++;

            if (!visited[nx][ny] && board[nx][ny] != 'S') {
                count += dfs(nx, ny);
            }
        }

        return count;
    }
}