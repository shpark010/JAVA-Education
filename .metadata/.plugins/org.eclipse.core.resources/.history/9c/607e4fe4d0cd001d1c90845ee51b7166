import java.util.Scanner;

public class Solution {
    
    // 상하좌우 4방향을 저장하는 배열
    static int[] dx = {-1, 0, 1, 0};
    static int[] dy = {0, 1, 0, -1};

    // 재귀함수로 포가 먹을 수 있는 알의 수를 구하는 함수
    static int count(char[][] board, int x, int y) {
        int al = 0; // 먹을 수 있는 알의 수
        for (int i = 0; i < 4; i++) { // 상하좌우 4방향으로 이동
            int nx = x + dx[i];
            int ny = y + dy[i];
            while (nx >= 0 && nx < board.length && ny >= 0 && ny < board.length) {
                if (board[nx][ny] == 'H') { // 일반 알인 경우
                    al++;
                    break;
                } else if (board[nx][ny] == 'Y') { // 다른 포인 경우
                    break;
                }
                nx += dx[i];
                ny += dy[i];
            }
        }
        return al;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt(); // 테스트 케이스 수
        for (int t = 1; t <= T; t++) {
            int N = sc.nextInt(); // 바둑판의 크기
            char[][] board = new char[N][N];
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < N; j++) {
                    board[i][j] = sc.next().charAt(0);
                }
            }

            int answer = 0; // 먹을 수 있는 알의 총합
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < N; j++) {
                    if (board[i][j] == 'X') { // 포인 경우
                        answer += count(board, i, j);
                    }
                }
            }

            System.out.println("#" + t + " " + answer); // 출력
        }
        sc.close();
    }
}