/*
현업 개발
한 개의 클래스로 설계한 경우는 없다.

설계도 1장에 모든 업무를 구현 -> 현실적으로 불가능(유지보수 어렵다)
설계도를 여러개로 나눈다. -> 문제 발생 (어떤 기준, 논리로 나누고 묶을 것인가?)

ex) 쇼핑몰
결제관리, 배송관리, 재고관리, 회원관리, 상품관리, 판매처관리, 카드관리.... -> 각각의 업무별 설계도

*************** 기준 **************
여러개의 설계도가 있을 때 관계를 만들어주는 기준

1. [상속] : is	~ a	: ?은(는) ~ 이다.	-> [상속]의 관계 (부모를 뒤에)
2. [포함] : has	~ a	: ?은(는) ~을 가지고 있다. -> [포함]의 관계

원은 도형이다 -> 1번(상속)
경찰은 권총이다 -> X ->
경찰은 권총을 가지고 있다 -> 2번(포함)

원은 도형이다.
원 extends 도형
삼각형은 도형이다.
삼각형 extends 도형


원 , 점 관계
원은 점이다. (X)

원은 점을 가지고 있다. (O)
has ~ a (부품정보)
>> class 원 { 점이라는 부품이 member field로 구현 -> 점 원의점; }
>> class 점 { x,y }

경찰 권총
경찰은 권총이다. (X)
경찰은 권총을 가지고 있다. (O)
class 권총 {}
class 경찰 { 권총 member field }

원은 도형이다.
삼각형은 도형이다.
사각형은 도형이다.

도형  분모 (공통적) 자원을 가진다 : 추상화, 일반화 -> 그리다, 색상
원 : 구체와, 특수화(자신만이 가지는 특징) >> 반지름, 한 점

점 : 좌표값(x,y)
원은 점을 가지고 있다.
삼각형은 점을 가지고 있다.
사각형은 점을 가지고 있다.

-----------------------------------
class Shape{ 그리다, 색상 } -> 상속관계에서 부모 역할 -> 원, 삼각형, 사각형의 부모일 것이다.
class Point{ 좌표값 } -> 포함관계 -> (부품)

구체화, 특수화 할 자원 -> Circle, Triangle

 */
class Shape {
	String color = "gold";
}

class Point {
	
}

public class Ex02_Inherit_Composition {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
